# -*- coding: utf-8 -*-
"""TUPRO3_AI_MECCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JQgTF1i0a_zZi_cJxH_CFK3qfrXLA1Q
"""

# library
import numpy as np
import pandas as pd
from scipy.spatial.distance import euclidean
from google.colab import files
import io



#Digunakan untuk membaca data
def bacadata(file_):
    df = file_
    train_ = pd.DataFrame(pd.read_excel(df, sheet_name='train'))
    test_ = pd.DataFrame(pd.read_excel(df, sheet_name='test'))
    return train_, test_

#Untuk menghitung Jarak
def jarak(Train, Test):
    distnc = []
    for j in range(len(Test[0])):
        lst = []
        for i in range(len(Train[0])):
            a = (Train[0][i], Train[1][i], Train[2][i])
            b = (Test[0][j], Test[1][j], Test[2][j])
            lst.append(euclidean(a,b))
        distnc.append(lst)
    return distnc

#Untuk menentukan Class
def menentukan_kelas(data, Train, k):
    dataTrain = Train
    kls = []
    for i in range(len(data)):
        x = data[i]
        dmpList = [x for _, x in sorted(zip(x,dataTrain))]
        kelas = max(set(dmpList[0:k]), key = dmpList.count)
        kls.append(kelas)    
    return kls

#Evaluasi Model
def akurasi(k):
    data = pd.ExcelFile('traintest.xlsx')
    latih = pd.read_excel(data, 'train')
    x1 = latih['x1'].tolist()
    x2 = latih['x2'].tolist()
    x3 = latih['x3'].tolist()
    y = latih['y'].tolist()
    print("Uji coba Evaluasi dengan K :", k)

    #evaluasi pertama
    print(" ")
    print("Evaluasi Pertama")
    
    x1Eva1 = x1[0:74]
    x2Eva1 = x2[0:74]
    x3Eva1 = x3[0:74]
    x1Eva1U1 = x1[74:148]
    x1Eva1U2 = x2[74:148]
    x1Eva1U3 = x3[74:148]
    yEva1 = y[74:148]
    arrayEva1 = np.array((x1Eva1, x2Eva1, x3Eva1), dtype = int)
    arrayEva2 = np.array((x1Eva1U1, x1Eva1U2, x1Eva1U3), dtype = int)
    dmp1 = jarak(arrayEva1, arrayEva2)
    Kelas1 = menentukan_kelas(dmp1, yEva1, k)
    count = 0
    for i in range(len(dmp1)):
        if Kelas1[i] == yEva1[i]:
            count += 1
    print("Nilai akurasi : ", (count/len(yEva1)))
    print(" ")



    #evaluasi kedua
    print(" ")
    print("Evaluasi Kedua")
    x1Eva1 = x1[148:222]
    x2Eva1 = x2[148:222]
    x3Eva1 = x3[148:222]
    x1Eva1U1 = x1[222:296]
    x1Eva1U2 = x2[222:296]
    x1Eva1U3 = x3[222:296]
    yEva1 = y[222:296]
    arrayEva1 = np.array((x1Eva1, x2Eva1, x3Eva1), dtype = int)
    arrayEva2 = np.array((x1Eva1U1, x1Eva1U2, x1Eva1U3), dtype = int)
    dmp1 = jarak(arrayEva1, arrayEva2)
    Kelas1 = menentukan_kelas(dmp1, yEva1, k)
    count = 0
    for i in range(len(dmp1)):
        if Kelas1[i] == yEva1[i]:
            count += 1
    print("Nilai akurasi : ", (count/len(yEva1)))

#Digunakan untuk menulis output file
def writeData(nama, output):
    inp = pd.ExcelFile(nama)
    data = pd.read_excel(inp, 'test')
    id = data['id'].tolist()
    x1 = data['x1'].tolist()
    x2 = data['x2'].tolist()
    x3 = data['x3'].tolist()

    df = pd.DataFrame({'id': id,'x1': x1, 'x2': x2, 'x3': x3, 'y': output })
    df.to_excel('output.xlsx', sheet_name='hasil', index=False)

def main():
    uploaded = files.upload()
    df = pd.ExcelFile(io.BytesIO(uploaded.get('traintest.xlsx')))
    xTrain, yTest = bacadata(df)
    arrayTrain = np.array((xTrain['x1'].tolist(),xTrain['x2'].tolist(),xTrain['x3'].tolist()), dtype= int)
    arrayTest = np.array((yTest['x1'].tolist(),yTest['x2'].tolist(),yTest['x3'].tolist()), dtype= int)
    dmp = jarak(arrayTrain, arrayTest)
    k = int(input("Masukkan banyak k(Tetangga): "))
    dataTrain = xTrain['y'].tolist()
    Kelas = menentukan_kelas(dmp, dataTrain, k)
    akurasi(k)
    writeData('traintest.xlsx', Kelas)

if __name__ == '__main__':
    print("TugasPemrograman=03-Learning-Mecca")
    print("/---------------------------------/")
    main()
    print("/----------------------------------/")
    print("selesai")

"""#### untuk pembacaan file output yang diperoleh"""

df = pd.read_excel('output.xlsx')

df.head(10)

df = pd.read_excel('traintest.xlsx')

df.head(50)